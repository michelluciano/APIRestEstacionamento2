package br.com.everis.estacionamento.controller;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.everis.estacionamento.controller.dto.DetalheVeiculoDto;
import br.com.everis.estacionamento.controller.dto.VeiculoDto;
import br.com.everis.estacionamento.controller.form.AtualizaVeiculoForm;
import br.com.everis.estacionamento.controller.form.VeiculoForm;
import br.com.everis.estacionamento.model.Veiculo;
import br.com.everis.estacionamento.repository.CategoriaRepository;
import br.com.everis.estacionamento.repository.VeiculoRepository;

@RestController
@RequestMapping("/veiculo")
public class VeiculoController {
	
	@Autowired
	private VeiculoRepository veiculoRepository;
	
	@Autowired
	private CategoriaRepository categoriaRepository;
	
	
	
	//Listando todos os veiculos com paginação
	@GetMapping
	public Page<VeiculoDto> lista( @RequestParam int pagina, @RequestParam int qtd, @RequestParam String ordenacao){ 
		
		Pageable paginacao = PageRequest.of(pagina, qtd);
		
		//if (placaVeiculo == null) {
			Page<Veiculo> veiculos = veiculoRepository.findAll(paginacao);
			return VeiculoDto.converterp(veiculos);
//		} 
//		else{
//			Page<Veiculo> veiculos = veiculoRepository.findByplacaveiculo(placaVeiculo, paginacao);
//			return VeiculoDto.converterp(veiculos);
//			}
		
			//List<Veiculo> veiculos = veiculoRepository.findByCategoria_valorhora(placaVeiculo);
			//return VeiculoDto.converter(veiculos);
	}
	
	
	
	//Listando veiculos por placa
	@GetMapping("/placa")
	public List<VeiculoDto> lista(String placaVeiculo){
		if (placaVeiculo == null) {
			List<Veiculo> veiculos = veiculoRepository.findAll();
			return VeiculoDto.converter(veiculos);
		} else{
			List<Veiculo> veiculos = veiculoRepository.findByplacaveiculo(placaVeiculo);
			return VeiculoDto.converter(veiculos);
			}
		
			//List<Veiculo> veiculos = veiculoRepository.findByCategoria_valorhora(placaVeiculo);
			//return VeiculoDto.converter(veiculos);
	}
	
	// cadastrando um novo veiculo
	@PostMapping
	@Transactional
	public ResponseEntity<VeiculoDto> cadastrar(@RequestBody @Valid VeiculoForm form, UriComponentsBuilder uriBuilder) {
		Veiculo veiculo = form.converter(categoriaRepository);
		veiculoRepository.save(veiculo);
		URI uri = uriBuilder.path("/veiculo/{id}").buildAndExpand(veiculo.getIdveiculo()).toUri();
		return ResponseEntity.created(uri).body(new VeiculoDto(veiculo));
	}
	
	//Procurando um Veiculo por ID
	@GetMapping("/{id}")
	public VeiculoDto detalha(@PathVariable Long id) {
		Veiculo veiculo = veiculoRepository.getOne(id);
		return new VeiculoDto(veiculo);
	}
	
	//Procurando um Veiculo por ID
	@GetMapping("/detalhe/{id}")
	public ResponseEntity<DetalheVeiculoDto> detalhe(@PathVariable Long id) {
		Optional<Veiculo> veiculo = veiculoRepository.findById(id);
		if (veiculo.isPresent()) {
			return ResponseEntity.ok(new DetalheVeiculoDto(veiculo.get()));
		}
		return ResponseEntity.notFound().build();
		
	}
	
	// atualizando um veiculo
	@PutMapping("/{id}")
	@Transactional
	public ResponseEntity<VeiculoDto> atualizar(@PathVariable Long id, @RequestBody @Valid AtualizaVeiculoForm form){
		Optional<Veiculo> optional = veiculoRepository.findById(id);
		if (optional.isPresent()) {
			Veiculo veiculo = form.atualizar(id, veiculoRepository);
			return ResponseEntity.ok(new VeiculoDto(veiculo));
		}
		return ResponseEntity.notFound().build();
	}
	
	//removendo um veiculo
	@DeleteMapping("/{id}")
	@Transactional
	public ResponseEntity<?> remover(@PathVariable long id){
		Optional<Veiculo> optional = veiculoRepository.findById(id);
		if (optional.isPresent()) {
			veiculoRepository.deleteById(id);
			System.out.println("Veiculo deletado");
			return ResponseEntity.ok().build();
		}
		return ResponseEntity.notFound().build();
	}
}
